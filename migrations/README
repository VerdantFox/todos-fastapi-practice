Generic single-database configuration.# Alembic + alembic

Database migrations are necessary to update existing databases, especially when those databases contain data. So, for example, if you need to add/remove a table, add/remove a field from a table, or change an existing field, you'll need to run a database migration. And when I say "table", I also mean an SQLAlchemy model class corresponding to those tables.

Let's discuss how to perform database migrations with [alembic](https://alembic.readthedocs.io/en/latest/). alembic is a simple wrapper on [Alembic](https://alembic.sqlalchemy.org/en/latest/index.html), a database migration tool for [SQLAlchemy](https://www.sqlalchemy.org/). From alembic's documentation:

> alembic is an extension that configures Alembic in the proper way to work with your Flask and Flask-SQLAlchemy application. In terms of the actual database migrations, everything is handled by Alembic so you get exactly the same functionality.

alembic configures Alembic to work well with Flask, provides an app context for our Flask-SQLAlchemy integration, and provides some command line utility.

## Key code bits

We initialize a `flask_migrate.Migrate` object and the run `init_app` on it to further initialize it with our database and the Flask app.

```python
from flask_migrate import Migrate

...

app = ...  # our initialized Flask app
db = ...  # our initialized SQLAlchemy db
migrate = Migrate()
migrate.init_app(app, db)
```

Now that we have an initialized `flask_migrate.Migrate` object, we can now call alembic commands on the command line.

## Alembic command line tool

Alembic can be used on its own with the command `alembic`. However, I made a convenience script `python -m scripts.alembic` that can be used for easier use with this package.

```bash
python -m scripts.alembic --help              # Show all the alembic commands
python -m scripts.alembic migrate -m MESSAGE  # Auto-generate a migration file
python -m scripts.alembic upgrade             # Upgrade to a later version
python -m scripts.alembic downgrade           # Downgrade to an earlier version (probably won't use this often)
python -m scripts.alembic stamp               # 'stamp' the revision table with the given revision
                                              #   (Will use once, see  "Initial migration" section below)
```

## File structure

This `migrations/` directory was auto-generated by the command `alembic init migrations`. The file structure for the migrations directory looks something like this:

```txt
project_root/
    ├── migrations/
    │   ├── alembic.ini       # Alembic configuration file
    │   ├── env.py            # Script that runs the migration files
    │   ├── README.md         # This README.md (was pretty bare when created)
    │   ├── script.py.mako    # Template file for generating migration scripts
    │   └── versions/         # Directory housing all the migration scripts
    │       ├── 6b99ee86edc9_initial_migration.py        # │
    │       ├── 2b1ae634e5cd_added_column_to_table_x.py  # ├──  migration scripts
    │       ├── 3adcc9a56557_add_some_table.py           # │
    .       .                                              .
```

## How does alembic work?

Alembic creates a table in the database called `alembic_version`. That database table has a single field, `version_num`, which tracks the current migration version. The `version_num` is a hash value that looks like "6b99ee86edc9". The hash value corresponds to a hash prefix for whichever migration script the database has most recently migrated.

When we change the database schema (by changing the SQLAlchemy models) and we run `python -m scripts.alembic migrate -m MESSAGE`, we will **auto-generate** a migration script. The auto-generated migration script is created by comparing the difference between the current SQLAlchemy models and the state of the database. _Sometimes_, we will need to alter the auto-generated migration script manually. When the migration script is ready, we will run `python -m scripts.alembic upgrade` to run a database **upgrade**. The migration upgrade uses the `upgrade` function in the migration script to match our database schema state to our SQLAlchemy schema models. When the upgrade completes, alembic updates the `alembic_version` table to reflect the most recent database migration version hash.

## Performing database migrations

The typical workflow for performing database migrations looks like this:

1. Add/remove/update an SQLAlchemy model object (or several).
2. Run the `migrate` command `python -m scripts.alembic migrate -m "Made some changes"`
   - This will generate a python file in the `migrations/versions/` directory that looks like `3adcc9a56557_made_some_changes.py`.
3. Read over the auto-generated migration file.
   - Sometimes, it is necessary to write custom changes in this migration file.
   - For instance, renaming a column might not generate the correct alembic update code.
   - See the [Alembic operations documentation](https://alembic.sqlalchemy.org/en/latest/ops.html) for understanding/writing migration script operations.
4. Run the migration upgrade with `python -m scripts.alembic upgrade`.

This project does not have automatic migrations (yet), so at this point, you'll want to indicate that `python -m scripts.alembic upgrade` should be run against any development or production databases outside your local environment.

## Getting local database to a specific migration version

We can create a new local postgres container with `scripts/start-local-postgres.sh`. By default, this script creates a new postgres container and creates tables as specified by the SQLAlchemy models in `db_models`. To create a new local Postgres container and migrate that Postgres database to the latest migration version (which will be different from the SQLAlchemy models in `db_models` if you have altered them), run:

```bash
./dev_tools/start-local-postgres.sh --migrate head
```

In this way, you can migrate a local database to the latest migration version, then run `python -m scripts.alembic migrate -m MESSAGE` to generate a migration script with the differences between the latest migration script and your `db_models` changes. If you need to migrate to a specific version that is not the latest migration version, run:

```bash
./dev_tools/start-local-postgres.sh --migrate VERSION
```

## Performing a database rollback

All database migration scripts include an `upgrade` function and a `downgrade` function. If we need to perform a rollback, we run the `downgrade` function:

```bash
python -m scripts.alembic downgrade
```

The above command will perform a downgrade of one level. It will run the `downgrade` function for the current migration version hash file. To downgrade to a specific migration hash version, specify the version after `downgrade`:

```bash
python -m scripts.alembic downgrade VERSION
```

The above command will run all the `downgrade` functions between the current and specified migration versions in order.

## Generating a SQL script

You might want to generate an SQL file migration script for a DB administrator to run instead of running the standard `python -m scripts.alembic upgrade`. To do this, we run a migration upgrade in "offline mode" by passing the `--sql` flag.

To get a migration SQL script from database creation to the latest migration version:

```bash
python -m scripts.alembic upgrade --sql > my_migration.sql
```

To get a migration SQL script from one migration to another:

```bash
python -m scripts.alembic upgrade --sql START_HASH:END_HASH > my_migration.sql
# example:
# python -m scripts.alembic upgrade 1975ea83b712:ae1027a6acf --sql > my_migration.sql
```

Running a migration upgrade with `--sql` **does not upgrade a live database**; it just generates the SQL script (hence "offline mode"). [For more details on running migrations in "offline mode", see the official alembic documentation on this subject](https://alembic.sqlalchemy.org/en/latest/offline.html).

## Initial migration

TL, DR: We need to run `python -m scripts.alembic stamp head` to perform the initial migration.

[I followed a guide by Miguel Grinberg, maintainer of Flask-Migration for the initial database migration](https://blog.miguelgrinberg.com/post/how-to-add-alembic-to-an-existing-project). Typically, when alembic is used on a new database, we'd generate the initial migration by calling `python -m scripts.alembic migrate -m MESSAGE`, which would generate a new migration file by comparing an empty database with our existing database models. However, we already have a database (at least in dev). Therefore, to generate our initial migration file, we need to **get** an empty database. I created a local docker database without any tables. Then I ran `python -m scripts.alembic migrate -m "Initial migration"`. This command generated the file `6b99ee86edc9_initial_migration.py`. The script's contents describe how to create all our database tables from scratch.

Typically, to run a migration, once the appropriate migration file is generated, you'd run `python -m scripts.alembic upgrade`. However, our dev database is already upgraded to the latest version, so this command won't work. So instead, we run `python -m scripts.alembic stamp head` to indicate to the **existing** database that it is already migrated to the latest version.

> This command will add an alembic_version table to your database and store the initial migration generated above as the current migration. The head alias always points to the most recent migration, which in our case, is the first and only one currently in the repository.

Done! From this point forward, we perform database migrations like normal.

## How to perform a migration when adding a NOT NULL column

Write the NOT NULL column upgrades in three parts.

1. Add the column as nullable.
2. Run an `execute` command to update all values in the new column to a default value.
3. Update the column to NOT NULL

For an example of a migration script that does this several times and also updates the default value dynamically, see `migrations/versions/f3f3c7d09e99_user_permissions_update.py`. To upgrade an existing column to NOT NULL, perform the same steps, skipping step 1 above.
